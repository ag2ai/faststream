# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/002_ProducerManager.ipynb.

# %% auto 0
__all__ = ['logger', 'AIOKafkaProducerManager']

# %% ../../nbs/002_ProducerManager.ipynb 1
from typing import *

from contextlib import contextmanager, asynccontextmanager

from aiokafka import AIOKafkaProducer
import anyio
import asyncio

from .logger import get_logger

# %% ../../nbs/002_ProducerManager.ipynb 5
logger = get_logger(__name__)

# %% ../../nbs/002_ProducerManager.ipynb 8
@asynccontextmanager
async def _aiokafka_producer_manager(
    producer: AIOKafkaProducer, *, max_buffer_size: int = 10_000
):
    """Write docs

    Todo: add batch size if needed
    """

    async def send_message(receive_stream):
        async with receive_stream:
            async for topic, msg in receive_stream:
                fut = await producer.send(topic, msg)
                msg = await fut

    send_stream, receive_stream = anyio.create_memory_object_stream(
        max_buffer_size=max_buffer_size
    )

    task_group_generator = anyio.create_task_group()
    task_group = await task_group_generator.__aenter__()
    task_group.start_soon(send_message, receive_stream)
    await send_stream.__aenter__()
    yield send_stream
    await send_stream.__aexit__(None, None, None)
    await task_group_generator.__aexit__(None, None, None)

# %% ../../nbs/002_ProducerManager.ipynb 11
class AIOKafkaProducerManager:
    def __init__(
        self,
        *,
        bootstrap_servers: str,
        max_buffer_size: int = 10_000,
        **kwargs,
    ):
        self.producer = AIOKafkaProducer(bootstrap_servers=bootstrap_servers)
        self.max_buffer_size = max_buffer_size

    async def start(self):
        self.producer_manager_generator = _aiokafka_producer_manager(self.producer)
        self.send_stream = await self.producer_manager_generator.__aenter__()

    async def stop(self):
        await self.producer.stop()
        await self.producer_manager_generator.__aexit__(None, None, None)

    def send(self, topic: str, msg: bytes):
        self.send_stream.send_nowait((topic, msg))
