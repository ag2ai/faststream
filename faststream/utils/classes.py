import sys
from typing import Any


class Singleton:
    """A class to implement the Singleton design pattern.

    Attributes:
        _instance : the single instance of the class

    Methods:
        __new__ : creates a new instance of the class if it doesn't exist, otherwise returns the existing instance
        _drop : sets the instance to None, allowing a new instance to be created
    !!! note

        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
    """

    _instance = None

    def __new__(cls, *args: Any, **kwargs: Any) -> "Singleton":
        """Create a singleton instance of a class.

        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments

        Returns:
            The singleton instance of the class
        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    @classmethod
    def _drop(cls) -> None:
        """Drop the instance of a class.

        Returns:
            None
        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        cls._instance = None


if sys.version_info < (3, 10):
    from contextlib import AbstractAsyncContextManager, AbstractContextManager
    from typing import Generic, Optional, TypeVar, overload

    from faststream._compat import TypeAlias

    Unused: TypeAlias = object
    _T = TypeVar("_T")

    class nullcontext(AbstractContextManager, AbstractAsyncContextManager, Generic[_T]):  # type: ignore[type-arg]
        """Context manager that does no additional processing.

        Used as a stand-in for a normal context manager, when a particular
        block of code is only sometimes used with a normal context manager:

        cm = optional_cm if condition else nullcontext()
        with cm:
            # Perform operation, using optional_cm if condition is True
        """

        enter_result: _T

        @overload
        def __init__(self: "nullcontext[None]", enter_result: None = None) -> None:
            ...

        @overload
        def __init__(self: "nullcontext[_T]", enter_result: _T) -> None:
            ...

        def __init__(
            self: "nullcontext[Optional[_T]]", enter_result: Optional[_T] = None
        ) -> None:
            self.enter_result = enter_result

        def __enter__(self) -> _T:
            return self.enter_result

        def __exit__(self, *exctype: Unused) -> None:
            pass

        async def __aenter__(self) -> _T:
            return self.enter_result

        async def __aexit__(self, *exctype: Unused) -> None:
            pass

else:
    from contextlib import nullcontext  # noqa: F401
