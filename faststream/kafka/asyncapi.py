from typing import Dict

from fast_depends.core import build_call_model

from faststream.asyncapi.base import AsyncAPIOperation
from faststream.asyncapi.message import get_response_schema, parse_handler_params
from faststream.asyncapi.schema import (
    Channel,
    ChannelBinding,
    CorrelationId,
    Message,
    Operation,
)
from faststream.asyncapi.schema.bindings import kafka
from faststream.asyncapi.utils import resolve_payloads, to_camelcase
from faststream.kafka.handler import LogicHandler
from faststream.kafka.publisher import LogicPublisher


class Handler(LogicHandler, AsyncAPIOperation):
    """A class to handle logic and async API operations.

    Methods:
        schema() -> Dict[str, Channel]: Returns a dictionary of channels.
    !!! note

        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
    """

    def schema(self) -> Dict[str, Channel]:
        channels = {}

        for t in self.topics:
            payloads = []
            for _, _, _, _, _, dep in self.calls:
                body = parse_handler_params(dep, prefix=t)
                payloads.append(body)

            channels[self.name if isinstance(self.name, str) else t] = Channel(
                description=self.description,
                subscribe=Operation(
                    message=Message(
                        title=f"{t}_message",
                        payload=resolve_payloads(payloads),
                        correlationId=CorrelationId(
                            location="$message.header#/correlation_id"
                        ),
                    ),
                ),
                bindings=ChannelBinding(kafka=kafka.ChannelBinding(topic=t)),
            )

        return channels


class Publisher(LogicPublisher, AsyncAPIOperation):
    """A class representing a publisher.

    Attributes:
        name : name of the publisher

    Methods:
        schema() : returns the schema for the publisher

    Raises:
        NotImplementedError: If silent animals are not supported
    !!! note

        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
    """

    def schema(self) -> Dict[str, Channel]:
        payloads = []
        for call in self.calls:
            call_model = build_call_model(call)
            body = get_response_schema(
                call_model,
                prefix=to_camelcase(call_model.call_name),
            )
            if body:
                payloads.append(body)

        return {
            self.title
            or self.topic: Channel(
                description=self.description,
                publish=Operation(
                    message=Message(
                        title=f"{self.topic}_message",
                        payload=resolve_payloads(payloads),
                        correlationId=CorrelationId(
                            location="$message.header#/correlation_id"
                        ),
                    ),
                ),
                bindings=ChannelBinding(kafka=kafka.ChannelBinding(topic=self.topic)),
            )
        }
