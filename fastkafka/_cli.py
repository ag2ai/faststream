# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/004_CLI.ipynb.

# %% auto 0
__all__ = ['logger', 'ImportFromStringError', 'KafkaWorkersHandler', 'run', 'generate_docs']

# %% ../nbs/004_CLI.ipynb 1
import importlib
import sys
import asyncio
from pathlib import Path
from typing import *
import signal
from os import getpid
import time
import anyio
import threading
import copy

import typer
from fastapi import FastAPI

from .application import FastKafka
from ._components.logger import get_logger, supress_timestamps

# %% ../nbs/004_CLI.ipynb 3
logger = get_logger(__name__)

# %% ../nbs/004_CLI.ipynb 8
class ImportFromStringError(Exception):
    pass


def _import_from_string(import_str: str) -> Any:
    """Imports library from string

    Note:
        copied from https://github.com/encode/uvicorn/blob/master/uvicorn/importer.py

    Args:
        import_str: input string in form 'main:app'

    """
    sys.path.append(".")

    if not isinstance(import_str, str):
        return import_str

    module_str, _, attrs_str = import_str.partition(":")
    if not module_str or not attrs_str:
        message = (
            'Import string "{import_str}" must be in format "<module>:<attribute>".'
        )
        typer.secho(f"{message}", err=True, fg=typer.colors.RED)
        raise ImportFromStringError(message.format(import_str=import_str))

    try:
        # nosemgrep: python.lang.security.audit.non-literal-import.non-literal-import
        module = importlib.import_module(module_str)
    except ImportError as exc:
        if exc.name != module_str:
            raise exc from None
        message = 'Could not import module "{module_str}".'
        raise ImportFromStringError(message.format(module_str=module_str))

    instance = module
    try:
        for attr_str in attrs_str.split("."):
            instance = getattr(instance, attr_str)
    except AttributeError:
        message = 'Attribute "{attrs_str}" not found in module "{module_str}".'
        raise ImportFromStringError(
            message.format(attrs_str=attrs_str, module_str=module_str)
        )

    return instance

# %% ../nbs/004_CLI.ipynb 11
class KafkaWorkersHandler:
    def __init__(
        self,
        *,
        app: FastKafka,
        num_workers: int = 1,
    ) -> None:
        self.workers = [copy.deepcopy(app) for _ in range(num_workers)]
        self.should_exit = False

    def run(self) -> None:
        return asyncio.run(self.serve())

    async def serve(self) -> None:
        process_id = getpid()

        self.install_signal_handlers()

        message = f"Starting workers in process: {process_id}"
        logger.info(message)

        self._bg_task_group_generator = anyio.create_task_group()
        self._bg_tasks_group = await self._bg_task_group_generator.__aenter__()
        for worker in self.workers:
            self._bg_tasks_group.start_soon(worker.serve)
        await self.main_loop()
        logger.info("Stopping workers....")
        for worker in self.workers:
            worker.run = False
        await self._bg_task_group_generator.__aexit__(None, None, None)  # type: ignore

        message = f"Stopped workers in process: {process_id}"
        logger.info(message)

    def install_signal_handlers(self) -> None:
        if threading.current_thread() is not threading.main_thread():
            # Signals can only be listened to from the main thread.
            return

        loop = asyncio.get_event_loop()

        HANDLED_SIGNALS = (
            signal.SIGINT,  # Unix signal 2. Sent by Ctrl+C.
            signal.SIGTERM,  # Unix signal 15. Sent by `kill <pid>`.
        )

        for sig in HANDLED_SIGNALS:
            loop.add_signal_handler(sig, self.handle_exit, sig)

    def handle_exit(self, sig: int) -> None:
        self.should_exit = True

    async def main_loop(self) -> None:
        while not self.should_exit:
            await asyncio.sleep(0.1)

# %% ../nbs/004_CLI.ipynb 12
_app = typer.Typer(help="")


@_app.command(
    help="Runs Fast Kafka API application",
)
def run(
    num_workers: int = typer.Option(1, help="Number of FastKafka instances to run"),
    app: str = typer.Argument(
        ...,
        help="input in the form of 'path:app', where **path** is the path to a python file and **app** is an object of type **FastKafka**.",
    ),
) -> None:
    try:
        application = _import_from_string(app)
        worker_handler = KafkaWorkersHandler(app=application, num_workers=num_workers)
        worker_handler.run()
    except Exception as e:
        typer.secho(f"Unexpected internal error: {e}", err=True, fg=typer.colors.RED)
        raise typer.Exit(1)


@_app.command(
    help="Creates documentation for a Fast Kafka API application ",
)
def generate_docs(
    root_path: str = typer.Option(
        ".", help="root path under which documentation will be created"
    ),
    app: str = typer.Argument(
        ...,
        help="input in the form of 'path:app', where **path** is the path to a python file and **app** is an object of type **FastKafka**.",
    ),
) -> None:
    try:
        application = _import_from_string(app)
        application.skip_docs = False
        application.create_docs()
    except Exception as e:

        typer.secho(f"Unexpected internal error: {e}", err=True, fg=typer.colors.RED)
        raise typer.Exit(1)
