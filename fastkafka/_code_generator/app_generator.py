# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/029_App_Generator.ipynb.

# %% auto 0
__all__ = ['logger', 'SAMPLE_CODE', 'generate_app']

# %% ../../nbs/029_App_Generator.ipynb 1
from typing import *
import time

from yaspin import yaspin
from .._components.logger import get_logger

# %% ../../nbs/029_App_Generator.ipynb 3
logger = get_logger(__name__)

# %% ../../nbs/029_App_Generator.ipynb 5
SAMPLE_CODE = """
from pydantic import BaseModel, Field, NonNegativeFloat

from fastkafka import FastKafka
from fastkafka._components.logger import get_logger

logger = get_logger(__name__)

class Data(BaseModel):
    data: NonNegativeFloat = Field(
        ..., example=0.5, description="Float data example"
    )

kafka_brokers = {
    "localhost": {
        "url": "localhost",
        "description": "local development kafka broker",
        "port": 9092,
    },
    "production": {
        "url": "kafka.airt.ai",
        "description": "production kafka broker",
        "port": 9092,
        "protocol": "kafka-secure",
        "security": {"type": "plain"},
    },
}

kafka_app = FastKafka(
    title="Demo Kafka app",
    kafka_brokers=kafka_brokers,
)

@kafka_app.consumes(topic="input_data", auto_offset_reset="latest")
async def on_input_data(msg: Data):
    logger.info(f"Got data: {msg.data}")
    await to_output_data(msg.data)


@kafka_app.produces(topic="output_data")
async def to_output_data(data: float) -> Data:
    processed_data = Data(data=data+1.0)
    return processed_data
"""

# %% ../../nbs/029_App_Generator.ipynb 6
def generate_app(plan: str) -> str:
    """Generate code for the new FastKafka app from the validated plan

    Args:
        plan: The plan generated from the user's application description

    Returns:
        The generated FastKafka code
    """
    # TODO: Implement the actual functionality
    with yaspin(
        text="Generating FastKafka app...", color="cyan", spinner="clock"
    ) as sp:
        time.sleep(3)
        sp.text = ""
        sp.ok(" âœ” FastKafka app generated and saved at: /some_dir/application.py")
        return SAMPLE_CODE
