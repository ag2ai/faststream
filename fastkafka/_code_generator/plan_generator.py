# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/028_Plan_Generator.ipynb.

# %% auto 0
__all__ = ['logger', 'SAMPLE_PLAN', 'generate_plan']

# %% ../../nbs/028_Plan_Generator.ipynb 1
from typing import *
import time

from yaspin import yaspin
from .._components.logger import get_logger

# %% ../../nbs/028_Plan_Generator.ipynb 3
logger = get_logger(__name__)

# %% ../../nbs/028_Plan_Generator.ipynb 5
SAMPLE_PLAN: Dict[str, List[Dict[str, Any]]] = {
    "entities": [
        {
            "name": "StoreProduct",
            "arguments": {
                "product_name": "str",
                "currency": "str",
                "price": "float",
            },
        }
    ],
    "apps": [
        {
            "appName": "app",
            "kafka_brokers": None,
            "title": "FastKafka App",
            "consumes_functions": {
                "on_store_product": {
                    "topic": "store_product",
                    "prefix": "on",
                    "input_parameters": [{"msg": "StoreProduct"}],
                }
            },
            "produces_functions": {
                "to_change_currency": {
                    "topic": "change_currency",
                    "prefix": "to",
                    "input_parameters": [{"store_product": "StoreProduct"}],
                    "returns": "StoreProduct",
                }
            },
        }
    ],
}

# %% ../../nbs/028_Plan_Generator.ipynb 6
def generate_plan(description: str) -> Dict[str, List[Dict[str, Any]]]:
    """Generate a plan from user's application description

    Args:
        description: User's application description

    Returns:
        The plan generated by OpenAI as a dictionary
    """
    # TODO: Implement the actual functionality
    with yaspin(
        text="Generating plan (slowest step, usually takes 30 to 90 seconds)...",
        color="cyan",
        spinner="clock",
    ) as sp:
        time.sleep(5)
        sp.text = ""
        sp.ok(" âœ” Plan generated")
        return SAMPLE_PLAN
