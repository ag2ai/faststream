# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/026_CLI_Code_Generator.ipynb.

# %% auto 0
__all__ = ['logger', 'generate_fastkafka_app']

# %% ../nbs/026_CLI_Code_Generator.ipynb 1
from typing import *

import typer

from ._components.logger import get_logger
from ._code_generator.app_description_validator import validate_app_description
from ._code_generator.plan_generator import generate_plan
from ._code_generator.app_generator import generate_app
from ._code_generator.test_generator import generate_test

# %% ../nbs/026_CLI_Code_Generator.ipynb 3
logger = get_logger(__name__)

# %% ../nbs/026_CLI_Code_Generator.ipynb 6
_code_generator_app = typer.Typer(
    short_help="Commands for accelerating FastKafka app creation using advanced AI technology",
    help="""Commands for accelerating FastKafka app creation using advanced AI technology.

These commands uses OpenAI's GPT-3.5 API for generating FastKafka code. To access this feature, kindly sign up if you haven't already and create an API key with OpenAI. If you're unsure about creating a new OpenAI API key, check this link for guidance: https://help.openai.com/en/articles/4936850-where-do-i-find-my-secret-api-key.

Once you have the key, please set it in the OPENAI_API_KEY environment variable before executing the code generation commands.

Note: Accessing OpenAI API incurs charges. However, when you sign up for the first time, you usually get free credits that are more than enough to generate multiple FastKafka applications. For further information on pricing and free credicts, check this link: https://openai.com/pricing
    """,
)

# %% ../nbs/026_CLI_Code_Generator.ipynb 7
@_code_generator_app.command(
    "generate",
    help="Generate a new FastKafka app(s) effortlessly with advanced AI assistance",
)
def generate_fastkafka_app(
    description: str = typer.Argument(
        ...,
        help="""Summarize your FastKafka app in a few sentences!


\nInclude details about message classes, FastKafka app configuration (e.g., kafka_brokers), consumer and producer functions, and specify the business logic to be implemented. 


\nThe simpler and more specific the app description is, the better the generated app will be. Please refer to the below example for inspiration:


\nCreate a FastKafka application that consumes messages from the "store_product" topic. These messages should have three attributes: "product_name," "currency," and "price". While consuming, the app needs to produce a message to the "change_currency" topic. The function responsible for producing should take a "store_product" object as input and return the same object. Additionally, this function should check if the currency in the input "store_product" is "HRK." If it is, then the currency should be changed to "EUR," and the price should be divided by 7.5. Remember, the app should use a "localhost" broker.


\n""",
    )
) -> None:
    """Generate a new FastKafka app(s) effortlessly with advanced AI assistance"""
    try:
        validated_description, description_token = validate_app_description(description)
        plan = generate_plan(validated_description)
        code = generate_app(plan)
        test = generate_test(code)

        typer.secho(f" ▶ Total tokens usage: {description_token}", fg=typer.colors.CYAN)
        typer.secho("✨  All files were successfully generated.!", fg=typer.colors.CYAN)

    except ValueError as e:
        typer.secho(e, err=True, fg=typer.colors.RED)
        raise typer.Exit(code=1)
    except Exception as e:
        typer.secho(f"Unexpected internal error: {e}", err=True, fg=typer.colors.RED)
        raise typer.Exit(code=1)
