# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/002_ProducerManager.ipynb.

# %% auto 0
__all__ = ['logger', 'AIOKafkaProducerManager']

# %% ../../nbs/002_ProducerManager.ipynb 1
import asyncio
from contextlib import asynccontextmanager, contextmanager
from typing import *

import anyio
from aiokafka import AIOKafkaProducer
from anyio.streams.memory import MemoryObjectReceiveStream

from .logger import get_logger

# %% ../../nbs/002_ProducerManager.ipynb 5
logger = get_logger(__name__)

# %% ../../nbs/002_ProducerManager.ipynb 8
@asynccontextmanager
async def _aiokafka_producer_manager(  # type: ignore
    producer: AIOKafkaProducer, *, max_buffer_size: int = 10_000
):
    """Write docs

    Todo: add batch size if needed
    """

    logger.info("_aiokafka_producer_manager(): Starting...")

    async def send_message(receive_stream: MemoryObjectReceiveStream) -> Any:
        """Send a message to a stream

        Args:
            receive_stream: The stream to receive the message

        Returns:
            The message

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        async with receive_stream:
            async for topic, msg in receive_stream:
                fut = await producer.send(topic, msg)
                msg = await fut

    send_stream, receive_stream = anyio.create_memory_object_stream(
        max_buffer_size=max_buffer_size
    )

    logger.info("_aiokafka_producer_manager(): Starting task group")
    async with anyio.create_task_group() as task_group:
        logger.info("_aiokafka_producer_manager(): Starting send_stream")
        task_group.start_soon(send_message, receive_stream)
        async with send_stream:
            yield send_stream
            logger.info("_aiokafka_producer_manager(): Exiting send_stream")
        logger.info("_aiokafka_producer_manager(): Exiting task group")
    logger.info("_aiokafka_producer_manager(): Finished.")

# %% ../../nbs/002_ProducerManager.ipynb 11
class AIOKafkaProducerManager:
    """AIOKafkaProducerManager

    Attributes:
        producer : AIOKafkaProducer
        max_buffer_size : int

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
    """

    def __init__(self, producer: AIOKafkaProducer, *, max_buffer_size: int = 1_000):  # type: ignore
        """Initialize the KafkaProducer.

        Args:
            producer: AIOKafkaProducer
            max_buffer_size: Maximum buffer size

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        self.producer = producer
        self.max_buffer_size = max_buffer_size

    async def start(self) -> None:
        """!!! note

        Failed to generate docs

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        logger.info("AIOKafkaProducerManager.start(): Entering...")
        await self.producer.start()
        self.producer_manager_generator = _aiokafka_producer_manager(self.producer)
        self.send_stream = await self.producer_manager_generator.__aenter__()
        logger.info("AIOKafkaProducerManager.start(): Finished.")

    async def stop(self) -> None:
        # todo: try to flush messages before you exit
        """!!! note

        Failed to generate docs

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        logger.info("AIOKafkaProducerManager.stop(): Entering...")
        await self.producer_manager_generator.__aexit__(None, None, None)
        logger.info("AIOKafkaProducerManager.stop(): Stoping producer...")
        await self.producer.stop()
        logger.info("AIOKafkaProducerManager.stop(): Finished")

    def send(self, topic: str, msg: bytes) -> None:
        """Send a message to a topic.

        Args:
            topic: The topic to send the message to.
            msg: The message to send.

        Returns:
            None

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        self.send_stream.send_nowait((topic, msg))
