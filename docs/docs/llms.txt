# FastStream
> Open-source framework for building asynchronous web services that interact with event streams.Supports Kafka, RabbitMQ, NATS, Redis, and integrates seamlessly with FastAPI.

FastStream simplifies the process of writing producers and consumers for message queues, handling all the parsing, networking and documentation generation automatically.
Making streaming microservices has never been easier. Designed with junior developers in mind, FastStream simplifies your work while keeping the door open for more advanced use cases.

## Subscription and Serialization
- [Subscription and Serialization](https://faststream.ag2.ai/latest/getting-started/subscription/) - Subscription and Serialization Basics
- [Annotation Serialization](https://faststream.ag2.ai/latest/getting-started/subscription/annotation/) - Serialization using type annotations
- [Pydantic Serialization](https://faststream.ag2.ai/latest/getting-started/subscription/pydantic/) - Pydantic-based message parsing
- [Msgspec Serialization](https://faststream.ag2.ai/latest/getting-started/subscription/msgspec/) - Msgspec for fast serialization
- [Filtering](https://faststream.ag2.ai/latest/getting-started/subscription/filtering/) - Filter messages by criteria
- [Testing](https://faststream.ag2.ai/latest/getting-started/subscription/test/) - Test subscribers and message flow
- [Dynamic Subscribers](https://faststream.ag2.ai/latest/getting-started/subscription/dynamic/) - Create subscribers at runtime

## Publishing
- [Publishing](https://faststream.ag2.ai/latest/getting-started/publishing/) - Publishing Basics
- [Broker Publish](https://faststream.ag2.ai/latest/getting-started/publishing/broker/) - Publish using broker.publish() method
- [Decorator](https://faststream.ag2.ai/latest/getting-started/publishing/decorator/) - Publisher decorator for handlers
- [Object Decorator](https://faststream.ag2.ai/latest/getting-started/publishing/object/) - Publisher as a decorator object
- [Direct Publishing](https://faststream.ag2.ai/latest/getting-started/publishing/direct/) - Direct publishing with publisher object
- [Testing](https://faststream.ag2.ai/latest/getting-started/publishing/test/) - Testing message publishing

## Routers
- [Routers](https://faststream.ag2.ai/latest/getting-started/routers/) - Organize handlers with routers

## Dependencies
- [Dependencies](https://faststream.ag2.ai/latest/getting-started/dependencies/) - Dependency injection system

## Context
- [Context](https://faststream.ag2.ai/latest/getting-started/context/) - Context management for handlers
- [Existing Fields](https://faststream.ag2.ai/latest/getting-started/context/existed/) - Access built-in context fields
- [Custom Context](https://faststream.ag2.ai/latest/getting-started/context/custom/) - Add custom context data
- [Fields Access](https://faststream.ag2.ai/latest/getting-started/context/fields/) - Retrieve context values in handlers
- [Extra Options](https://faststream.ag2.ai/latest/getting-started/context/extra/) - Advanced context configuration

## Custom Serialization
- [Custom Serialization](https://faststream.ag2.ai/latest/getting-started/serialization/) - Customize message serialization
- [Parser](https://faststream.ag2.ai/latest/getting-started/serialization/parser/) - Custom message parsing logic
- [Decoder](https://faststream.ag2.ai/latest/getting-started/serialization/decoder/) - Decode raw message data
- [Examples](https://faststream.ag2.ai/latest/getting-started/serialization/examples/) - Practical serialization examples

## Lifespan
- [Lifespan](https://faststream.ag2.ai/latest/getting-started/lifespan/) - Manage application lifecycle
- [Hooks](https://faststream.ag2.ai/latest/getting-started/lifespan/hooks/) - Startup and shutdown hooks
- [Context](https://faststream.ag2.ai/latest/getting-started/lifespan/context/) - Share data across lifespan events
- [Testing](https://faststream.ag2.ai/latest/getting-started/lifespan/test/) - Test lifespan handlers

## Middlewares
- [Middlewares](https://faststream.ag2.ai/latest/getting-started/middlewares/) - Middleware support for handlers
- [Exception Middleware](https://faststream.ag2.ai/latest/getting-started/middlewares/exception/) - Handle exceptions globally

## AsyncAPI
- [AsyncAPI](https://faststream.ag2.ai/latest/getting-started/asyncapi/) - AsyncAPI schema and documentation
- [Schema Export](https://faststream.ag2.ai/latest/getting-started/asyncapi/export/) - Export AsyncAPI schema as JSON/YAML
- [Schema Hosting](https://faststream.ag2.ai/latest/getting-started/asyncapi/hosting/) - Serve AsyncAPI docs via web
- [Customize Information](https://faststream.ag2.ai/latest/getting-started/asyncapi/custom/) - Customize AsyncAPI metadata

## Integrations
- [Integrations](https://faststream.ag2.ai/latest/getting-started/integrations/) - Framework integrations
- [HTTP Async Frameworks](https://faststream.ag2.ai/latest/getting-started/integrations/frameworks/) - Integrate with async HTTP frameworks
- [FastAPI Plugin](https://faststream.ag2.ai/latest/getting-started/integrations/fastapi/) - Use FastStream inside FastAPI
- [Django](https://faststream.ag2.ai/latest/getting-started/integrations/django/) - Integrate with Django projects

## CLI
- [CLI](https://faststream.ag2.ai/latest/getting-started/cli/) - FastStream command-line interface

## Acknowledgement
- [Acknowledgement](https://faststream.ag2.ai/latest/getting-started/acknowledgement/) - Manual message acknowledgement

## ASGI
- [ASGI](https://faststream.ag2.ai/latest/getting-started/asgi/) - Run FastStream as ASGI application

## Observability
- [Observability](https://faststream.ag2.ai/latest/getting-started/observability/) - Monitoring and observability tools
- [Healthchecks](https://faststream.ag2.ai/latest/getting-started/observability/healthcheks/) - Health check endpoints
- [Prometheus](https://faststream.ag2.ai/latest/getting-started/observability/prometheus/) - Expose metrics for Prometheus
- [OpenTelemetry](https://faststream.ag2.ai/latest/getting-started/observability/opentelemetry/) - Distributed tracing and telemetry
- [Tracing](https://faststream.ag2.ai/latest/getting-started/observability/opentelemetry/tracing/) - Trace message processing
- [Baggage](https://faststream.ag2.ai/latest/getting-started/observability/opentelemetry/baggage/) - Propagate context via baggage
- [Sentry support](https://faststream.ag2.ai/latest/getting-started/observability/opentelemetry/sentry/) - Error tracking with Sentry
- [Logging](https://faststream.ag2.ai/latest/getting-started/observability/logging/) - Structured logging setup

## Config Management
- [Config Management](https://faststream.ag2.ai/latest/getting-started/config/) - Application configuration management

## Task Scheduling
- [Task Scheduling](https://faststream.ag2.ai/latest/scheduling/) - Schedule periodic tasks (external link)

## FastStream Project Template
- [FastStream Project Template](https://faststream.ag2.ai/latest/getting-started/template/) - Generate projects with cookiecutter

## Kafka
- [Kafka](https://faststream.ag2.ai/latest/kafka/kafka/) - Kafka Integration Overview
- [AIOKafka](https://faststream.ag2.ai/latest/kafka/) - AIOKafka-based Broker
- [Subscription](https://faststream.ag2.ai/latest/kafka/Subscriber/) - Subscribe to Kafka topics
- [Batch Subscriber](https://faststream.ag2.ai/latest/kafka/Subscriber/batch_subscriber/) - Consume messages in batches
- [Publishing](https://faststream.ag2.ai/latest/kafka/Publisher/) - Publish messages to Kafka
- [Batch Publishing](https://faststream.ag2.ai/latest/kafka/Publisher/batch_publisher/) - Send multiple messages at once
- [Publish With Key](https://faststream.ag2.ai/latest/kafka/Publisher/using_a_key/) - Use message keys for partitioning
- [Acknowledgement](https://faststream.ag2.ai/latest/kafka/ack/) - Manual message acknowledgment
- [Message Information](https://faststream.ag2.ai/latest/kafka/message/) - Access raw message metadata
- [Security Configuration](https://faststream.ag2.ai/latest/kafka/security/) - Configure SSL, SASL, and authentication
- [Confluent](https://faststream.ag2.ai/latest/confluent/) - Confluent Kafka Client Integration
- [Subscription](https://faststream.ag2.ai/latest/confluent/Subscriber/) - Subscribe using Confluent client
- [Batch Subscriber](https://faststream.ag2.ai/latest/confluent/Subscriber/batch_subscriber/) - Batch message consumption
- [Publishing](https://faststream.ag2.ai/latest/confluent/Publisher/) - Publish with Confluent client
- [Batch Publishing](https://faststream.ag2.ai/latest/confluent/Publisher/batch_publisher/) - Batch publishing support
- [Publish With Key](https://faststream.ag2.ai/latest/confluent/Publisher/using_a_key/) - Key-based message routing
- [Acknowledgement](https://faststream.ag2.ai/latest/confluent/ack/) - Commit offsets manually
- [Message Information](https://faststream.ag2.ai/latest/confluent/message/) - Extract message headers and metadata
- [Security Configuration](https://faststream.ag2.ai/latest/confluent/security/) - SASL/SSL and Confluent Cloud setup
- [Additional Configuration](https://faststream.ag2.ai/latest/confluent/additional-configuration/) - Advanced Confluent settings
- [How-To](https://faststream.ag2.ai/latest/howto/kafka/) - Practical Kafka usage guides
- [Kafka RPC](https://faststream.ag2.ai/latest/howto/kafka/rpc/) - Implement request-response pattern over Kafka

## RabbitMQ
- [RabbitMQ](https://faststream.ag2.ai/latest/rabbit/) - RabbitMQ Integration Overview
- [Subscription](https://faststream.ag2.ai/latest/rabbit/examples/) - RabbitMQ Subscription Patterns
- [Direct](https://faststream.ag2.ai/latest/rabbit/examples/direct/) - Direct exchange: routing by exact key
- [Fanout](https://faststream.ag2.ai/latest/rabbit/examples/fanout/) - Fanout exchange: broadcast to all queues
- [Topic](https://faststream.ag2.ai/latest/rabbit/examples/topic/) - Topic exchange: pattern-based routing
- [Headers](https://faststream.ag2.ai/latest/rabbit/examples/headers/) - Headers exchange: routing by key-value headers
- [Stream](https://faststream.ag2.ai/latest/rabbit/examples/stream/) - Stream exchange: persistent message streaming
- [Publishing](https://faststream.ag2.ai/latest/rabbit/publishing/) - Publishing messages to RabbitMQ
- [RPC](https://faststream.ag2.ai/latest/rabbit/rpc/) - Implement request-response pattern (RPC)
- [Acknowledgement](https://faststream.ag2.ai/latest/rabbit/ack/) - Manual message acknowledgment control
- [Declare Queue/Exchange](https://faststream.ag2.ai/latest/rabbit/declare/) - Explicitly declare queues and exchanges
- [Message Information](https://faststream.ag2.ai/latest/rabbit/message/) - Access message metadata and headers
- [Security Configuration](https://faststream.ag2.ai/latest/rabbit/security/) - Configure SSL, credentials, and auth

## NATS
- [NATS](https://faststream.ag2.ai/latest/nats/) - NATS Integration Overview
- [Subscription](https://faststream.ag2.ai/latest/nats/examples/) - Subscribe to NATS subjects
- [Direct](https://faststream.ag2.ai/latest/nats/examples/direct/) - Direct subject-based subscription
- [Pattern](https://faststream.ag2.ai/latest/nats/examples/pattern/) - Wildcard-based topic pattern matching
- [JetStream](https://faststream.ag2.ai/latest/nats/jetstream/) - NATS JetStream support (persistent streams)
- [Pull Subscriber](https://faststream.ag2.ai/latest/nats/jetstream/pull/) - Pull-based message consumption
- [Key-Value Storage](https://faststream.ag2.ai/latest/nats/jetstream/key-value/) - Use JetStream KV store
- [Object Storage](https://faststream.ag2.ai/latest/nats/jetstream/object/) - Store and retrieve large objects
- [Acknowledgement](https://faststream.ag2.ai/latest/nats/jetstream/ack/) - Manual message acknowledgment in JetStream
- [Publishing](https://faststream.ag2.ai/latest/nats/publishing/) - Publishing messages to NATS
- [RPC](https://faststream.ag2.ai/latest/nats/rpc/) - Request-response pattern over NATS
- [Message Information](https://faststream.ag2.ai/latest/nats/message/) - Access message metadata and headers
- [How-To](https://faststream.ag2.ai/latest/howto/nats/) - Practical NATS usage guides
- [DynaConf](https://faststream.ag2.ai/latest/howto/nats/dynaconf/) - Integrate with DynaConf configuration
- [In-Progress](https://faststream.ag2.ai/latest/howto/nats/in-progress/) - Track message processing status

## Redis
- [Redis](https://faststream.ag2.ai/latest/redis/) - Redis Integration Overview
- [Pub/Sub](https://faststream.ag2.ai/latest/redis/pubsub/) - Redis Publish-Subscribe pattern
- [Subscription](https://faststream.ag2.ai/latest/redis/pubsub/subscription/) - Subscribe to Redis Pub/Sub channels
- [Publishing](https://faststream.ag2.ai/latest/redis/pubsub/publishing/) - Publish messages via Pub/Sub
- [List](https://faststream.ag2.ai/latest/redis/list/) - Use Redis lists as message queues
- [Subscription](https://faststream.ag2.ai/latest/redis/list/subscription/) - Consume messages from Redis list
- [Publishing](https://faststream.ag2.ai/latest/redis/list/publishing/) - Push messages to Redis list
- [Batching](https://faststream.ag2.ai/latest/redis/list/batch/) - Batch processing for list consumers
- [Streams](https://faststream.ag2.ai/latest/redis/streams/) - Redis Streams support
- [Subscription](https://faststream.ag2.ai/latest/redis/streams/subscription/) - Consume from Redis Streams
- [Publishing](https://faststream.ag2.ai/latest/redis/streams/publishing/) - Append messages to Redis Streams
- [Groups](https://faststream.ag2.ai/latest/redis/streams/groups/) - Consumer groups for parallel processing
- [Batching](https://faststream.ag2.ai/latest/redis/streams/batch/) - Batch message consumption from streams
- [Acknowledgement](https://faststream.ag2.ai/latest/redis/streams/ack/) - Manual acknowledgment in consumer groups
- [RPC](https://faststream.ag2.ai/latest/redis/rpc/) - Request-response pattern over Redis
- [Pipeline](https://faststream.ag2.ai/latest/redis/pipeline/) - Use Redis pipelines for optimized operations
- [Message Information](https://faststream.ag2.ai/latest/redis/message/) - Access raw message metadata and headers
- [Security Configuration](https://faststream.ag2.ai/latest/redis/security/) - Configure SSL, password, and auth
- [Message Format](https://faststream.ag2.ai/latest/redis/message_format/) - Customize message serialization format

## Reference - Code API
- [Reference - Code API](https://faststream.ag2.ai/latest/api/) - FastStream Public API Reference
- [Public API](https://faststream.ag2.ai/latest/public_api/faststream/BaseMiddleware/) - Public API
- [All API](https://faststream.ag2.ai/latest/api/faststream/BaseMiddleware/) - All API

## FastStream People
- [FastStream People](https://faststream.ag2.ai/latest/faststream-people/) - Core Team and Contributors

## Contributing
- [Contributing](https://faststream.ag2.ai/latest/getting-started/contributing/) - How to contribute to the project
- [Development](https://faststream.ag2.ai/latest/getting-started/contributing/CONTRIBUTING/) - Setting up dev environment and code contributions
- [Documentation](https://faststream.ag2.ai/latest/getting-started/contributing/docs/) - Writing and improving documentation

## Release Notes
- [Release Notes](https://faststream.ag2.ai/latest/release/) - Version history and changelog